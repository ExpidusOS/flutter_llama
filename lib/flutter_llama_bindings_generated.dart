// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/llama.cpp/llama.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class FlutterLlamaBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterLlamaBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterLlamaBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  llama_context_params context_default_params() {
    return _context_default_params();
  }

  late final _context_default_paramsPtr =
      _lookup<ffi.NativeFunction<llama_context_params Function()>>(
          'llama_context_default_params');
  late final _context_default_params =
      _context_default_paramsPtr.asFunction<llama_context_params Function()>();

  llama_model_quantize_params model_quantize_default_params() {
    return _model_quantize_default_params();
  }

  late final _model_quantize_default_paramsPtr =
      _lookup<ffi.NativeFunction<llama_model_quantize_params Function()>>(
          'llama_model_quantize_default_params');
  late final _model_quantize_default_params = _model_quantize_default_paramsPtr
      .asFunction<llama_model_quantize_params Function()>();

  bool mmap_supported() {
    return _mmap_supported();
  }

  late final _mmap_supportedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('llama_mmap_supported');
  late final _mmap_supported = _mmap_supportedPtr.asFunction<bool Function()>();

  bool mlock_supported() {
    return _mlock_supported();
  }

  late final _mlock_supportedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('llama_mlock_supported');
  late final _mlock_supported =
      _mlock_supportedPtr.asFunction<bool Function()>();

  /// TODO: not great API - very likely to change
  /// Initialize the llama + ggml backend
  /// If numa is true, use NUMA optimizations
  /// Call once at the start of the program
  void init_backend(
    bool numa,
  ) {
    return _init_backend(
      numa,
    );
  }

  late final _init_backendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>(
          'llama_init_backend');
  late final _init_backend = _init_backendPtr.asFunction<void Function(bool)>();

  int time_us() {
    return _time_us();
  }

  late final _time_usPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('llama_time_us');
  late final _time_us = _time_usPtr.asFunction<int Function()>();

  ffi.Pointer<llama_model> load_model_from_file(
    ffi.Pointer<ffi.Char> path_model,
    llama_context_params params,
  ) {
    return _load_model_from_file(
      path_model,
      params,
    );
  }

  late final _load_model_from_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_model> Function(ffi.Pointer<ffi.Char>,
              llama_context_params)>>('llama_load_model_from_file');
  late final _load_model_from_file = _load_model_from_filePtr.asFunction<
      ffi.Pointer<llama_model> Function(
          ffi.Pointer<ffi.Char>, llama_context_params)>();

  void free_model(
    ffi.Pointer<llama_model> model,
  ) {
    return _free_model(
      model,
    );
  }

  late final _free_modelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<llama_model>)>>(
          'llama_free_model');
  late final _free_model =
      _free_modelPtr.asFunction<void Function(ffi.Pointer<llama_model>)>();

  ffi.Pointer<llama_context> new_context_with_model(
    ffi.Pointer<llama_model> model,
    llama_context_params params,
  ) {
    return _new_context_with_model(
      model,
      params,
    );
  }

  late final _new_context_with_modelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_context> Function(ffi.Pointer<llama_model>,
              llama_context_params)>>('llama_new_context_with_model');
  late final _new_context_with_model = _new_context_with_modelPtr.asFunction<
      ffi.Pointer<llama_context> Function(
          ffi.Pointer<llama_model>, llama_context_params)>();

  ffi.Pointer<llama_context> init_from_file(
    ffi.Pointer<ffi.Char> path_model,
    llama_context_params params,
  ) {
    return _init_from_file(
      path_model,
      params,
    );
  }

  late final _init_from_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_context> Function(ffi.Pointer<ffi.Char>,
              llama_context_params)>>('llama_init_from_file');
  late final _init_from_file = _init_from_filePtr.asFunction<
      ffi.Pointer<llama_context> Function(
          ffi.Pointer<ffi.Char>, llama_context_params)>();

  /// Frees all allocated memory
  void free(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _free(
      ctx,
    );
  }

  late final _freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<llama_context>)>>(
      'llama_free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<llama_context>)>();

  /// Returns 0 on success
  int model_quantize(
    ffi.Pointer<ffi.Char> fname_inp,
    ffi.Pointer<ffi.Char> fname_out,
    ffi.Pointer<llama_model_quantize_params> params,
  ) {
    return _model_quantize(
      fname_inp,
      fname_out,
      params,
    );
  }

  late final _model_quantizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<llama_model_quantize_params>)>>(
      'llama_model_quantize');
  late final _model_quantize = _model_quantizePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<llama_model_quantize_params>)>();

  int apply_lora_from_file(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<ffi.Char> path_lora,
    ffi.Pointer<ffi.Char> path_base_model,
    int n_threads,
  ) {
    return _apply_lora_from_file(
      ctx,
      path_lora,
      path_base_model,
      n_threads,
    );
  }

  late final _apply_lora_from_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('llama_apply_lora_from_file');
  late final _apply_lora_from_file = _apply_lora_from_filePtr.asFunction<
      int Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int)>();

  int model_apply_lora_from_file(
    ffi.Pointer<llama_model> model,
    ffi.Pointer<ffi.Char> path_lora,
    ffi.Pointer<ffi.Char> path_base_model,
    int n_threads,
  ) {
    return _model_apply_lora_from_file(
      model,
      path_lora,
      path_base_model,
      n_threads,
    );
  }

  late final _model_apply_lora_from_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<llama_model>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('llama_model_apply_lora_from_file');
  late final _model_apply_lora_from_file =
      _model_apply_lora_from_filePtr.asFunction<
          int Function(ffi.Pointer<llama_model>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, int)>();

  /// Returns the number of tokens in the KV cache
  int get_kv_cache_token_count(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _get_kv_cache_token_count(
      ctx,
    );
  }

  late final _get_kv_cache_token_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<llama_context>)>>(
          'llama_get_kv_cache_token_count');
  late final _get_kv_cache_token_count = _get_kv_cache_token_countPtr
      .asFunction<int Function(ffi.Pointer<llama_context>)>();

  /// Sets the current rng seed.
  void set_rng_seed(
    ffi.Pointer<llama_context> ctx,
    int seed,
  ) {
    return _set_rng_seed(
      ctx,
      seed,
    );
  }

  late final _set_rng_seedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<llama_context>, ffi.Uint32)>>('llama_set_rng_seed');
  late final _set_rng_seed = _set_rng_seedPtr
      .asFunction<void Function(ffi.Pointer<llama_context>, int)>();

  /// Returns the maximum size in bytes of the state (rng, logits, embedding
  /// and kv_cache) - will often be smaller after compacting tokens
  int get_state_size(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _get_state_size(
      ctx,
    );
  }

  late final _get_state_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<llama_context>)>>(
      'llama_get_state_size');
  late final _get_state_size =
      _get_state_sizePtr.asFunction<int Function(ffi.Pointer<llama_context>)>();

  /// Copies the state to the specified destination address.
  /// Destination needs to have allocated enough memory.
  /// Returns the number of bytes copied
  int copy_state_data(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<ffi.Uint8> dst,
  ) {
    return _copy_state_data(
      ctx,
      dst,
    );
  }

  late final _copy_state_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<llama_context>,
              ffi.Pointer<ffi.Uint8>)>>('llama_copy_state_data');
  late final _copy_state_data = _copy_state_dataPtr.asFunction<
      int Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Uint8>)>();

  /// Set the state reading from the specified address
  /// Returns the number of bytes read
  int set_state_data(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<ffi.Uint8> src,
  ) {
    return _set_state_data(
      ctx,
      src,
    );
  }

  late final _set_state_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<llama_context>,
              ffi.Pointer<ffi.Uint8>)>>('llama_set_state_data');
  late final _set_state_data = _set_state_dataPtr.asFunction<
      int Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Uint8>)>();

  /// Save/load session file
  bool load_session_file(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<ffi.Char> path_session,
    ffi.Pointer<llama_token> tokens_out,
    int n_token_capacity,
    ffi.Pointer<ffi.Size> n_token_count_out,
  ) {
    return _load_session_file(
      ctx,
      path_session,
      tokens_out,
      n_token_capacity,
      n_token_count_out,
    );
  }

  late final _load_session_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<llama_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<llama_token>,
              ffi.Size,
              ffi.Pointer<ffi.Size>)>>('llama_load_session_file');
  late final _load_session_file = _load_session_filePtr.asFunction<
      bool Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<llama_token>, int, ffi.Pointer<ffi.Size>)>();

  bool save_session_file(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<ffi.Char> path_session,
    ffi.Pointer<llama_token> tokens,
    int n_token_count,
  ) {
    return _save_session_file(
      ctx,
      path_session,
      tokens,
      n_token_count,
    );
  }

  late final _save_session_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<llama_token>, ffi.Size)>>('llama_save_session_file');
  late final _save_session_file = _save_session_filePtr.asFunction<
      bool Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<llama_token>, int)>();

  /// Run the llama inference to obtain the logits and probabilities for the next token.
  /// tokens + n_tokens is the provided batch of new tokens to process
  /// n_past is the number of tokens to use from previous eval calls
  /// Returns 0 on success
  int eval(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<llama_token> tokens,
    int n_tokens,
    int n_past,
    int n_threads,
  ) {
    return _eval(
      ctx,
      tokens,
      n_tokens,
      n_past,
      n_threads,
    );
  }

  late final _evalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<llama_context>, ffi.Pointer<llama_token>,
              ffi.Int, ffi.Int, ffi.Int)>>('llama_eval');
  late final _eval = _evalPtr.asFunction<
      int Function(ffi.Pointer<llama_context>, ffi.Pointer<llama_token>, int,
          int, int)>();

  /// Same as llama_eval, but use float matrix input directly.
  int eval_embd(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<ffi.Float> embd,
    int n_tokens,
    int n_past,
    int n_threads,
  ) {
    return _eval_embd(
      ctx,
      embd,
      n_tokens,
      n_past,
      n_threads,
    );
  }

  late final _eval_embdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Float>,
              ffi.Int, ffi.Int, ffi.Int)>>('llama_eval_embd');
  late final _eval_embd = _eval_embdPtr.asFunction<
      int Function(
          ffi.Pointer<llama_context>, ffi.Pointer<ffi.Float>, int, int, int)>();

  /// Export a static computation graph for context of 511 and batch size of 1
  /// NOTE: since this functionality is mostly for debugging and demonstration purposes, we hardcode these
  /// parameters here to keep things simple
  /// IMPORTANT: do not use for anything else other than debugging and testing!
  int eval_export(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<ffi.Char> fname,
  ) {
    return _eval_export(
      ctx,
      fname,
    );
  }

  late final _eval_exportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<llama_context>,
              ffi.Pointer<ffi.Char>)>>('llama_eval_export');
  late final _eval_export = _eval_exportPtr.asFunction<
      int Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Char>)>();

  /// Convert the provided text into tokens.
  /// The tokens pointer must be large enough to hold the resulting tokens.
  /// Returns the number of tokens on success, no more than n_max_tokens
  /// Returns a negative number on failure - the number of tokens that would have been returned
  /// TODO: not sure if correct
  int tokenize(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<llama_token> tokens,
    int n_max_tokens,
    bool add_bos,
  ) {
    return _tokenize(
      ctx,
      text,
      tokens,
      n_max_tokens,
      add_bos,
    );
  }

  late final _tokenizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<llama_token>, ffi.Int, ffi.Bool)>>('llama_tokenize');
  late final _tokenize = _tokenizePtr.asFunction<
      int Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<llama_token>, int, bool)>();

  int n_vocab(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _n_vocab(
      ctx,
    );
  }

  late final _n_vocabPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<llama_context>)>>(
          'llama_n_vocab');
  late final _n_vocab =
      _n_vocabPtr.asFunction<int Function(ffi.Pointer<llama_context>)>();

  int n_ctx(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _n_ctx(
      ctx,
    );
  }

  late final _n_ctxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<llama_context>)>>(
          'llama_n_ctx');
  late final _n_ctx =
      _n_ctxPtr.asFunction<int Function(ffi.Pointer<llama_context>)>();

  int n_embd(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _n_embd(
      ctx,
    );
  }

  late final _n_embdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<llama_context>)>>(
          'llama_n_embd');
  late final _n_embd =
      _n_embdPtr.asFunction<int Function(ffi.Pointer<llama_context>)>();

  /// Get the vocabulary as output parameters.
  /// Returns number of results.
  int get_vocab(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<ffi.Pointer<ffi.Char>> strings,
    ffi.Pointer<ffi.Float> scores,
    int capacity,
  ) {
    return _get_vocab(
      ctx,
      strings,
      scores,
      capacity,
    );
  }

  late final _get_vocabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<llama_context>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Float>,
              ffi.Int)>>('llama_get_vocab');
  late final _get_vocab = _get_vocabPtr.asFunction<
      int Function(ffi.Pointer<llama_context>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Float>, int)>();

  /// Token logits obtained from the last call to llama_eval()
  /// The logits for the last token are stored in the last row
  /// Can be mutated in order to change the probabilities of the next token
  /// Rows: n_tokens
  /// Cols: n_vocab
  ffi.Pointer<ffi.Float> get_logits(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _get_logits(
      ctx,
    );
  }

  late final _get_logitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<llama_context>)>>('llama_get_logits');
  late final _get_logits = _get_logitsPtr.asFunction<
      ffi.Pointer<ffi.Float> Function(ffi.Pointer<llama_context>)>();

  /// Get the embeddings for the input
  /// shape: [n_embd] (1-dimensional)
  ffi.Pointer<ffi.Float> get_embeddings(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _get_embeddings(
      ctx,
    );
  }

  late final _get_embeddingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<llama_context>)>>('llama_get_embeddings');
  late final _get_embeddings = _get_embeddingsPtr.asFunction<
      ffi.Pointer<ffi.Float> Function(ffi.Pointer<llama_context>)>();

  /// Token Id -> String. Uses the vocabulary in the provided context
  ffi.Pointer<ffi.Char> token_to_str(
    ffi.Pointer<llama_context> ctx,
    int token,
  ) {
    return _token_to_str(
      ctx,
      token,
    );
  }

  late final _token_to_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<llama_context>, llama_token)>>('llama_token_to_str');
  late final _token_to_str = _token_to_strPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<llama_context>, int)>();

  /// Special tokens
  int token_bos() {
    return _token_bos();
  }

  late final _token_bosPtr =
      _lookup<ffi.NativeFunction<llama_token Function()>>('llama_token_bos');
  late final _token_bos = _token_bosPtr.asFunction<int Function()>();

  int token_eos() {
    return _token_eos();
  }

  late final _token_eosPtr =
      _lookup<ffi.NativeFunction<llama_token Function()>>('llama_token_eos');
  late final _token_eos = _token_eosPtr.asFunction<int Function()>();

  int token_nl() {
    return _token_nl();
  }

  late final _token_nlPtr =
      _lookup<ffi.NativeFunction<llama_token Function()>>('llama_token_nl');
  late final _token_nl = _token_nlPtr.asFunction<int Function()>();

  /// @details Repetition penalty described in CTRL academic paper https://arxiv.org/abs/1909.05858, with negative logit fix.
  void sample_repetition_penalty(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<llama_token_data_array> candidates,
    ffi.Pointer<llama_token> last_tokens,
    int last_tokens_size,
    double penalty,
  ) {
    return _sample_repetition_penalty(
      ctx,
      candidates,
      last_tokens,
      last_tokens_size,
      penalty,
    );
  }

  late final _sample_repetition_penaltyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<llama_context>,
              ffi.Pointer<llama_token_data_array>,
              ffi.Pointer<llama_token>,
              ffi.Size,
              ffi.Float)>>('llama_sample_repetition_penalty');
  late final _sample_repetition_penalty =
      _sample_repetition_penaltyPtr.asFunction<
          void Function(
              ffi.Pointer<llama_context>,
              ffi.Pointer<llama_token_data_array>,
              ffi.Pointer<llama_token>,
              int,
              double)>();

  /// @details Frequency and presence penalties described in OpenAI API https://platform.openai.com/docs/api-reference/parameter-details.
  void sample_frequency_and_presence_penalties(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<llama_token_data_array> candidates,
    ffi.Pointer<llama_token> last_tokens,
    int last_tokens_size,
    double alpha_frequency,
    double alpha_presence,
  ) {
    return _sample_frequency_and_presence_penalties(
      ctx,
      candidates,
      last_tokens,
      last_tokens_size,
      alpha_frequency,
      alpha_presence,
    );
  }

  late final _sample_frequency_and_presence_penaltiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<llama_context>,
              ffi.Pointer<llama_token_data_array>,
              ffi.Pointer<llama_token>,
              ffi.Size,
              ffi.Float,
              ffi.Float)>>('llama_sample_frequency_and_presence_penalties');
  late final _sample_frequency_and_presence_penalties =
      _sample_frequency_and_presence_penaltiesPtr.asFunction<
          void Function(
              ffi.Pointer<llama_context>,
              ffi.Pointer<llama_token_data_array>,
              ffi.Pointer<llama_token>,
              int,
              double,
              double)>();

  /// @details Sorts candidate tokens by their logits in descending order and calculate probabilities based on logits.
  void sample_softmax(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<llama_token_data_array> candidates,
  ) {
    return _sample_softmax(
      ctx,
      candidates,
    );
  }

  late final _sample_softmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<llama_context>,
              ffi.Pointer<llama_token_data_array>)>>('llama_sample_softmax');
  late final _sample_softmax = _sample_softmaxPtr.asFunction<
      void Function(
          ffi.Pointer<llama_context>, ffi.Pointer<llama_token_data_array>)>();

  /// @details Top-K sampling described in academic paper "The Curious Case of Neural Text Degeneration" https://arxiv.org/abs/1904.09751
  void sample_top_k(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<llama_token_data_array> candidates,
    int k,
    int min_keep,
  ) {
    return _sample_top_k(
      ctx,
      candidates,
      k,
      min_keep,
    );
  }

  late final _sample_top_kPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<llama_context>,
              ffi.Pointer<llama_token_data_array>,
              ffi.Int,
              ffi.Size)>>('llama_sample_top_k');
  late final _sample_top_k = _sample_top_kPtr.asFunction<
      void Function(ffi.Pointer<llama_context>,
          ffi.Pointer<llama_token_data_array>, int, int)>();

  /// @details Nucleus sampling described in academic paper "The Curious Case of Neural Text Degeneration" https://arxiv.org/abs/1904.09751
  void sample_top_p(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<llama_token_data_array> candidates,
    double p,
    int min_keep,
  ) {
    return _sample_top_p(
      ctx,
      candidates,
      p,
      min_keep,
    );
  }

  late final _sample_top_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<llama_context>,
              ffi.Pointer<llama_token_data_array>,
              ffi.Float,
              ffi.Size)>>('llama_sample_top_p');
  late final _sample_top_p = _sample_top_pPtr.asFunction<
      void Function(ffi.Pointer<llama_context>,
          ffi.Pointer<llama_token_data_array>, double, int)>();

  /// @details Tail Free Sampling described in https://www.trentonbricken.com/Tail-Free-Sampling/.
  void sample_tail_free(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<llama_token_data_array> candidates,
    double z,
    int min_keep,
  ) {
    return _sample_tail_free(
      ctx,
      candidates,
      z,
      min_keep,
    );
  }

  late final _sample_tail_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<llama_context>,
              ffi.Pointer<llama_token_data_array>,
              ffi.Float,
              ffi.Size)>>('llama_sample_tail_free');
  late final _sample_tail_free = _sample_tail_freePtr.asFunction<
      void Function(ffi.Pointer<llama_context>,
          ffi.Pointer<llama_token_data_array>, double, int)>();

  /// @details Locally Typical Sampling implementation described in the paper https://arxiv.org/abs/2202.00666.
  void sample_typical(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<llama_token_data_array> candidates,
    double p,
    int min_keep,
  ) {
    return _sample_typical(
      ctx,
      candidates,
      p,
      min_keep,
    );
  }

  late final _sample_typicalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<llama_context>,
              ffi.Pointer<llama_token_data_array>,
              ffi.Float,
              ffi.Size)>>('llama_sample_typical');
  late final _sample_typical = _sample_typicalPtr.asFunction<
      void Function(ffi.Pointer<llama_context>,
          ffi.Pointer<llama_token_data_array>, double, int)>();

  void sample_temperature(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<llama_token_data_array> candidates,
    double temp,
  ) {
    return _sample_temperature(
      ctx,
      candidates,
      temp,
    );
  }

  late final _sample_temperaturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<llama_context>,
              ffi.Pointer<llama_token_data_array>,
              ffi.Float)>>('llama_sample_temperature');
  late final _sample_temperature = _sample_temperaturePtr.asFunction<
      void Function(ffi.Pointer<llama_context>,
          ffi.Pointer<llama_token_data_array>, double)>();

  /// @details Mirostat 1.0 algorithm described in the paper https://arxiv.org/abs/2007.14966. Uses tokens instead of words.
  /// @param candidates A vector of `llama_token_data` containing the candidate tokens, their probabilities (p), and log-odds (logit) for the current position in the generated text.
  /// @param tau  The target cross-entropy (or surprise) value you want to achieve for the generated text. A higher value corresponds to more surprising or less predictable text, while a lower value corresponds to less surprising or more predictable text.
  /// @param eta The learning rate used to update `mu` based on the error between the target and observed surprisal of the sampled word. A larger learning rate will cause `mu` to be updated more quickly, while a smaller learning rate will result in slower updates.
  /// @param m The number of tokens considered in the estimation of `s_hat`. This is an arbitrary value that is used to calculate `s_hat`, which in turn helps to calculate the value of `k`. In the paper, they use `m = 100`, but you can experiment with different values to see how it affects the performance of the algorithm.
  /// @param mu Maximum cross-entropy. This value is initialized to be twice the target cross-entropy (`2 * tau`) and is updated in the algorithm based on the error between the target and observed surprisal.
  int sample_token_mirostat(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<llama_token_data_array> candidates,
    double tau,
    double eta,
    int m,
    ffi.Pointer<ffi.Float> mu,
  ) {
    return _sample_token_mirostat(
      ctx,
      candidates,
      tau,
      eta,
      m,
      mu,
    );
  }

  late final _sample_token_mirostatPtr = _lookup<
      ffi.NativeFunction<
          llama_token Function(
              ffi.Pointer<llama_context>,
              ffi.Pointer<llama_token_data_array>,
              ffi.Float,
              ffi.Float,
              ffi.Int,
              ffi.Pointer<ffi.Float>)>>('llama_sample_token_mirostat');
  late final _sample_token_mirostat = _sample_token_mirostatPtr.asFunction<
      int Function(
          ffi.Pointer<llama_context>,
          ffi.Pointer<llama_token_data_array>,
          double,
          double,
          int,
          ffi.Pointer<ffi.Float>)>();

  /// @details Mirostat 2.0 algorithm described in the paper https://arxiv.org/abs/2007.14966. Uses tokens instead of words.
  /// @param candidates A vector of `llama_token_data` containing the candidate tokens, their probabilities (p), and log-odds (logit) for the current position in the generated text.
  /// @param tau  The target cross-entropy (or surprise) value you want to achieve for the generated text. A higher value corresponds to more surprising or less predictable text, while a lower value corresponds to less surprising or more predictable text.
  /// @param eta The learning rate used to update `mu` based on the error between the target and observed surprisal of the sampled word. A larger learning rate will cause `mu` to be updated more quickly, while a smaller learning rate will result in slower updates.
  /// @param mu Maximum cross-entropy. This value is initialized to be twice the target cross-entropy (`2 * tau`) and is updated in the algorithm based on the error between the target and observed surprisal.
  int sample_token_mirostat_v2(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<llama_token_data_array> candidates,
    double tau,
    double eta,
    ffi.Pointer<ffi.Float> mu,
  ) {
    return _sample_token_mirostat_v2(
      ctx,
      candidates,
      tau,
      eta,
      mu,
    );
  }

  late final _sample_token_mirostat_v2Ptr = _lookup<
      ffi.NativeFunction<
          llama_token Function(
              ffi.Pointer<llama_context>,
              ffi.Pointer<llama_token_data_array>,
              ffi.Float,
              ffi.Float,
              ffi.Pointer<ffi.Float>)>>('llama_sample_token_mirostat_v2');
  late final _sample_token_mirostat_v2 =
      _sample_token_mirostat_v2Ptr.asFunction<
          int Function(
              ffi.Pointer<llama_context>,
              ffi.Pointer<llama_token_data_array>,
              double,
              double,
              ffi.Pointer<ffi.Float>)>();

  /// @details Selects the token with the highest probability.
  int sample_token_greedy(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<llama_token_data_array> candidates,
  ) {
    return _sample_token_greedy(
      ctx,
      candidates,
    );
  }

  late final _sample_token_greedyPtr = _lookup<
          ffi.NativeFunction<
              llama_token Function(ffi.Pointer<llama_context>,
                  ffi.Pointer<llama_token_data_array>)>>(
      'llama_sample_token_greedy');
  late final _sample_token_greedy = _sample_token_greedyPtr.asFunction<
      int Function(
          ffi.Pointer<llama_context>, ffi.Pointer<llama_token_data_array>)>();

  /// @details Randomly selects a token from the candidates based on their probabilities.
  int sample_token(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<llama_token_data_array> candidates,
  ) {
    return _sample_token(
      ctx,
      candidates,
    );
  }

  late final _sample_tokenPtr = _lookup<
      ffi.NativeFunction<
          llama_token Function(ffi.Pointer<llama_context>,
              ffi.Pointer<llama_token_data_array>)>>('llama_sample_token');
  late final _sample_token = _sample_tokenPtr.asFunction<
      int Function(
          ffi.Pointer<llama_context>, ffi.Pointer<llama_token_data_array>)>();

  /// Performance information
  llama_timings get_timings(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _get_timings(
      ctx,
    );
  }

  late final _get_timingsPtr = _lookup<
      ffi.NativeFunction<
          llama_timings Function(
              ffi.Pointer<llama_context>)>>('llama_get_timings');
  late final _get_timings = _get_timingsPtr
      .asFunction<llama_timings Function(ffi.Pointer<llama_context>)>();

  void print_timings(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _print_timings(
      ctx,
    );
  }

  late final _print_timingsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<llama_context>)>>(
      'llama_print_timings');
  late final _print_timings =
      _print_timingsPtr.asFunction<void Function(ffi.Pointer<llama_context>)>();

  void reset_timings(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _reset_timings(
      ctx,
    );
  }

  late final _reset_timingsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<llama_context>)>>(
      'llama_reset_timings');
  late final _reset_timings =
      _reset_timingsPtr.asFunction<void Function(ffi.Pointer<llama_context>)>();

  /// Print system information
  ffi.Pointer<ffi.Char> print_system_info() {
    return _print_system_info();
  }

  late final _print_system_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'llama_print_system_info');
  late final _print_system_info =
      _print_system_infoPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();
}

/// C interface
///
/// TODO: show sample usage
final class llama_model extends ffi.Opaque {}

final class llama_context extends ffi.Opaque {}

final class llama_token_data extends ffi.Struct {
  /// token id
  @llama_token()
  external int id;

  /// log-odds of the token
  @ffi.Float()
  external double logit;

  /// probability of the token
  @ffi.Float()
  external double p;
}

typedef llama_token = ffi.Int;

final class llama_token_data_array extends ffi.Struct {
  external ffi.Pointer<llama_token_data> data;

  @ffi.Size()
  external int size;

  @ffi.Bool()
  external bool sorted;
}

final class llama_context_params extends ffi.Struct {
  /// RNG seed, -1 for random
  @ffi.Uint32()
  external int seed;

  /// text context
  @ffi.Int32()
  external int n_ctx;

  /// prompt processing batch size
  @ffi.Int32()
  external int n_batch;

  /// number of layers to store in VRAM
  @ffi.Int32()
  external int n_gpu_layers;

  /// the GPU that is used for scratch and small tensors
  @ffi.Int32()
  external int main_gpu;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Float> tensor_split;

  /// called with a progress value between 0 and 1, pass NULL to disable
  external llama_progress_callback progress_callback;

  /// context pointer passed to the progress callback
  external ffi.Pointer<ffi.Void> progress_callback_user_data;

  /// if true, reduce VRAM usage at the cost of performance
  @ffi.Bool()
  external bool low_vram;

  /// use fp16 for KV cache
  @ffi.Bool()
  external bool f16_kv;

  /// the llama_eval() call computes all logits, not just the last one
  @ffi.Bool()
  external bool logits_all;

  /// only load the vocabulary, no weights
  @ffi.Bool()
  external bool vocab_only;

  /// use mmap if possible
  @ffi.Bool()
  external bool use_mmap;

  /// force system to keep model in RAM
  @ffi.Bool()
  external bool use_mlock;

  /// embedding mode only
  @ffi.Bool()
  external bool embedding;
}

typedef llama_progress_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Float progress, ffi.Pointer<ffi.Void> ctx)>>;

/// model file types
abstract class llama_ftype {
  static const int LLAMA_FTYPE_ALL_F32 = 0;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_F16 = 1;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q4_0 = 2;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q4_1 = 3;

  /// tok_embeddings.weight and output.weight are F16
  static const int LLAMA_FTYPE_MOSTLY_Q4_1_SOME_F16 = 4;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q8_0 = 7;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q5_0 = 8;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q5_1 = 9;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q2_K = 10;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q3_K_S = 11;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q3_K_M = 12;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q3_K_L = 13;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q4_K_S = 14;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q4_K_M = 15;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q5_K_S = 16;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q5_K_M = 17;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q6_K = 18;
}

/// model quantization parameters
final class llama_model_quantize_params extends ffi.Struct {
  /// number of threads to use for quantizing, if <=0 will use std::thread::hardware_concurrency()
  @ffi.Int()
  external int nthread;

  /// quantize to this llama_ftype
  @ffi.Int32()
  external int ftype;

  /// allow quantizing non-f32/f16 tensors
  @ffi.Bool()
  external bool allow_requantize;

  /// quantize output.weight
  @ffi.Bool()
  external bool quantize_output_tensor;
}

/// performance timing information
final class llama_timings extends ffi.Struct {
  @ffi.Double()
  external double t_start_ms;

  @ffi.Double()
  external double t_end_ms;

  @ffi.Double()
  external double t_load_ms;

  @ffi.Double()
  external double t_sample_ms;

  @ffi.Double()
  external double t_p_eval_ms;

  @ffi.Double()
  external double t_eval_ms;

  @ffi.Int32()
  external int n_sample;

  @ffi.Int32()
  external int n_p_eval;

  @ffi.Int32()
  external int n_eval;
}

const int LLAMA_MAX_DEVICES = 1;

const int LLAMA_FILE_MAGIC_GGJT = 1734830708;

const int LLAMA_FILE_MAGIC_GGLA = 1734831201;

const int LLAMA_FILE_MAGIC_GGMF = 1734831462;

const int LLAMA_FILE_MAGIC_GGML = 1734831468;

const int LLAMA_FILE_MAGIC_GGSN = 1734833006;

const int LLAMA_FILE_VERSION = 3;

const int LLAMA_FILE_MAGIC = 1734830708;

const int LLAMA_FILE_MAGIC_UNVERSIONED = 1734831468;

const int LLAMA_SESSION_MAGIC = 1734833006;

const int LLAMA_SESSION_VERSION = 1;

const int LLAMA_DEFAULT_SEED = 4294967295;
